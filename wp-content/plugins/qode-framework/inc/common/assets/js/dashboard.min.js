!(function (s) {
    "use strict";
    "object" != typeof qodef && (window.qodef = {}),
        s(document).ready(function () {
            e.init(), a.init(), d.init();
        });
    var e = {
            init: function () {
                (this.holder = s(".qodef-tab-wrapper")),
                    this.holder.length &&
                        this.holder.each(function () {
                            e.initTabs(s(this));
                        });
            },
            initTabs: function (e) {
                e.children(".qodef-tab-item-content").each(function (e) {
                    e += 1;
                    var t = s(this),
                        i = t.attr("id"),
                        t = t.parent().find(".qodef-tab-item-nav-wrapper li:nth-child(" + e + ") a"),
                        e = t.attr("href");
                    -1 < (i = "#" + i).indexOf(e) && t.attr("href", i);
                }),
                    e.addClass("qodef--init").tabs({
                        activate: function () {
                            "object" == typeof qodef.qodefAddressFields && qodef.qodefAddressFields.init(!0);
                        },
                    });
            },
        },
        a = {
            init: function () {
                a.initOptions(), a.initMenu(), a.initWidget();
            },
            initOptions: function () {
                var e = s(".qodef-field-content .qodef-field[data-option-name]");
                e.length && a.initFields(e);
            },
            initMenu: function () {
                var e = s("#update-nav-menu .qodef-menu-item-field[data-option-name]");
                e.length && a.initFields(e);
            },
            initWidget: function () {
                var e = s("#widgets-right .widget-content .qodef-widget-field[data-option-name]");
                e.length &&
                    e.each(function () {
                        var e = s(this);
                        a.initField(e);
                    });
            },
            reinitRepeater: function () {
                var e = s(".qodef-repeater-fields-holder .qodef-field-content .qodef-field[data-option-name]");
                e.length &&
                    e.each(function () {
                        var e = s(this);
                        switch (e.data("option-type")) {
                            case "selectbox":
                                a.qodefSelectBoxDependencyRepeater(e);
                                break;
                            case "radiogroup":
                                a.qodefRadioGroupDependencyRepeater(e);
                        }
                        a.initField(e);
                    });
            },
            reinitWidget: function (e) {
                a.initFields(e);
            },
            initFields: function (e) {
                e.each(function () {
                    var e = s(this);
                    e.parents(".qodef-repeater-template").length <= 0 && a.initField(e);
                });
            },
            initField: function (e) {
                var t = e.data("option-type");
                if (!e.hasClass("qodef-dependency-option"))
                    switch ((e.addClass("qodef-dependency-option"), t)) {
                        case "selectbox":
                            a.qodefSelectBoxDependency(e);
                            break;
                        case "radiogroup":
                        case "yesno":
                            a.qodefRadioGroupDependency(e);
                    }
            },
            qodefSelectBoxDependency: function (t) {
                t.on("change", function () {
                    var e = s(this).val();
                    a.qodefDependencyActionInit(t, e);
                }),
                    t.trigger("change");
            },
            qodefSelectBoxDependencyRepeater: function (e) {
                var t = e.val();
                a.qodefDependencyActionInit(e, t);
            },
            qodefRadioGroupDependency: function (t) {
                var e = t.data("option-name");
                t.find("input[name=" + e + "]").on("change", function () {
                    var e = this.value;
                    a.qodefDependencyActionInit(t, e);
                }),
                    a.qodefDependencyActionInit(t, t.find("input[name=" + t.data("option-name") + "]:checked").val());
            },
            qodefRadioGroupDependencyRepeater: function (e) {
                var t = e.data("option-name"),
                    t = e.find("input[name=" + t + "]").value;
                a.qodefDependencyActionInit(e, t);
            },
            qodefDependencyActionInit: function (e, n) {
                var t = s(".qodef-dependency-holder"),
                    o = e.data("option-name");
                t.length &&
                    void 0 !== o &&
                    "" !== o &&
                    void 0 !== n &&
                    t.each(function () {
                        var e = s(this),
                            t = e.data("show"),
                            i = e.data("hide");
                        "" !== t && void 0 !== t && (1 < a.qodefGetNumberOfItems(t) ? a.qodefMultipleDependencyLogic(t, e, o, n, !0) : a.qodefSingleDependencyLogic(t, e, o, n, !0)),
                            "" !== i && void 0 !== i && (1 < a.qodefGetNumberOfItems(i) ? a.qodefMultipleDependencyLogic(i, e, o, n, !1) : a.qodefSingleDependencyLogic(i, e, o, n, !1));
                    });
            },
            qodefGetNumberOfItems: function (e) {
                var t,
                    i = 0;
                for (t in e) e.hasOwnProperty(t) && ++i;
                return i;
            },
            qodefMultipleDependencyLogic: function (e, t, o, a, i) {
                var n,
                    d = [],
                    r = !0;
                for (n in (s.each(e, function (e, t) {
                    if (((t = t.split(",")), o === e)) -1 !== t.indexOf(a) ? d.push(!0) : d.push(!1);
                    else {
                        var i = s('.qodef-dependency-option[data-option-name="' + e + '"]'),
                            n = "";
                        switch (i.data("option-type")) {
                            case "checkbox":
                                n = i.find('input[type="hidden"][name="' + e + '"]').val();
                                break;
                            case "selectbox":
                                n = i.val();
                                break;
                            case "radiogroup":
                                n = i.find('input[name="' + e + '"]').val();
                        }
                        n.length && -1 !== t.indexOf(n) ? d.push(!0) : d.push(!1);
                    }
                }),
                d))
                    d[n] || (r = !1);
                i ? (r ? t.fadeIn(200) : t.fadeOut(200)) : r ? t.fadeOut(200) : t.fadeIn(200);
            },
            qodefSingleDependencyLogic: function (e, i, n, o, a) {
                s.each(e, function (e, t) {
                    n === e &&
                        ((t = t.split(",")),
                        a
                            ? -1 !== t.indexOf(o)
                                ? (i.removeClass("qodef-hide-dependency-holder"), i.addClass("qodef-show-dependency-holder"))
                                : (i.addClass("qodef-hide-dependency-holder"), i.removeClass("qodef-show-dependency-holder"))
                            : -1 !== t.indexOf(o)
                            ? (i.addClass("qodef-hide-dependency-holder"), i.removeClass("qodef-show-dependency-holder"))
                            : (i.removeClass("qodef-hide-dependency-holder"), i.addClass("qodef-show-dependency-holder")));
                });
            },
        };
    qodef.qodefDependency = a;
    var d = {
        init: function () {
            d.initRepeater(), d.initRepeaterInner();
        },
        initRepeater: function () {
            var e = s(".qodef-repeater-wrapper");
            e.length &&
                e.each(function () {
                    var e = s(this);
                    d.qodefAddNewRow(e), d.qodefRemoveRow(e), d.qodefInitSortable(e);
                });
        },
        initRepeaterInner: function () {
            var e = s(".qodef-repeater-inner-wrapper");
            e.length &&
                e.each(function () {
                    var e = s(this);
                    d.qodefAddNewRowInner(e), d.qodefRemoveRowInner(e), d.qodefInitSortableInner(e);
                });
        },
        qodefGetNumberOfRows: function (e) {
            return e.find(".qodef-repeater-fields-holder").length;
        },
        qodefInitSortable: function (e) {
            e.find(".qodef-repeater-wrapper-main.sortable").length && s(".qodef-repeater-wrapper-main.sortable").sortable({ placeholder: "qodef-placeholder", forcePlaceholderSize: !0 }), d.qodefInitSortableInner(e);
        },
        qodefInitSortableInner: function (e) {
            e.find(".qodef-repeater-inner-wrapper-main.sortable").length && s(".qodef-repeater-inner-wrapper-main.sortable").sortable({ placeholder: "qodef-placeholder", forcePlaceholderSize: !0 });
        },
        qodefAddNewRow: function (i) {
            var e = i.find(".qodef-repeater-add a"),
                t = i.find(".qodef-repeater-wrapper-main").data("template"),
                n = i.find(".qodef-repeater-wrapper-main"),
                o = wp.template("qodef-repeater-template-" + t);
            e.on("click", function (e) {
                e.preventDefault(), e.stopPropagation();
                var t = s(o({ rowIndex: d.qodefGetNumberOfRows(i) || 0 }));
                n.append(t);
                e = t.find(".qodef-repeater-inner-wrapper");
                d.qodefAddNewRowInner(e), d.qodefRemoveRowInner(e), d.qodefInitSortable(i), a.reinitRepeater(), s(document).trigger("qodef_add_new_row_trigger", t.find(".qodef-repeater-fields"));
            });
        },
        qodefRemoveRow: function (e) {
            e.find(".qodef-repeater-wrapper-main").on("click", ".qodef-clone-remove", function (e) {
                e.preventDefault(), e.stopPropagation(), window.confirm("Are you sure you want to remove this section?") && s(this).parents(".qodef-repeater-fields-holder").remove();
            });
        },
        qodefAddNewRowInner: function (n) {
            var e = n.find(".qodef-repeater-inner-add a"),
                t = n.find(".qodef-repeater-inner-wrapper-main").data("template"),
                o = wp.template("qodef-repeater-inner-template-" + t);
            e.on("click", function (e) {
                e.preventDefault(), e.stopPropagation();
                var t = s(this),
                    i = t.parents(".qodef-repeater-fields-holder").first(),
                    e = i.data("index"),
                    t = t.parent().parent().prev(),
                    i = i.find(".qodef-repeater-inner-fields-holder").length,
                    i = s(o({ rowIndex: e, rowInnerIndex: i }));
                t.append(i), d.qodefInitSortableInner(n), a.reinitRepeater();
            });
        },
        qodefRemoveRowInner: function (e) {
            e.find(".qodef-repeater-inner-wrapper-main").on("click", ".qodef-clone-inner-remove", function (e) {
                e.preventDefault(), e.stopPropagation(), confirm("Are you sure you want to remove section?") && s(this).parents(".qodef-repeater-inner-fields-holder").remove();
            });
        },
    };
})(jQuery),
    (function (c) {
        "use strict";
        "object" != typeof qodef && (window.qodef = {}),
            (qodef.scroll = 0),
            (qodef.windowWidth = c(window).width()),
            c(document).ready(function () {
                t.init(), n.init(), i.init(), o.init(), a.init(), d.init(), r.init(), f.init(), s.init(), e.init();
            }),
            c(window).on("load", function () {
                r.init(!0);
            }),
            c(window).scroll(function () {
                qodef.scroll = c(window).scrollTop();
            }),
            c(window).resize(function () {
                (qodef.windowWidth = c(window).width()), void 0 !== t.adminPage && t.adminPage.length && t.adminHeader.width(t.adminPage.width());
            }),
            c(document).on("widget-added widget-updated", function (e, t) {
                n.reinit(t);
            });
        var e = {
                init: function () {
                    c(document).on("qodef_add_new_row_trigger", function (e, t) {
                        f.fieldHolder.push(t), n.reinit(t), i.reinit(t), o.reinit(t), a.reinit(t), d.reinit(t);
                    });
                },
            },
            t = {
                init: function () {
                    (this.adminPage = c(".qodef-admin-page")), this.adminPage.length && (this.navigationInit(), this.saveOptionsInit(this.adminPage), this.setActivePanel(), this.adminHeaderPosition());
                },
                navigationInit: function () {
                    this.adminPage.find(".qodef-tabs-navigation-wrapper ul li").on("click", function () {
                        f.resetSearchView(), f.resetSearchField(), t.initNavItemClick(c(this));
                    });
                },
                initNavItemClick: function (e) {
                    var t = e.find(".nav-link").data("section"),
                        i = this.adminPage.find(".qodef-tabs-content");
                    i.find(".tab-content:visible").addClass("qodef-hide-pane"),
                        i.find(".tab-content[data-section=" + t + "]").removeClass("qodef-hide-pane"),
                        e.siblings(".qodef-active").removeClass("qodef-active"),
                        e.addClass("qodef-active"),
                        this.setCookie("qodefActiveTab", t);
                },
                setActivePanel: function () {
                    var e = this.getCookie("qodefActiveTab");
                    "" !== e ? this.initNavItemClick(c(".qodef-tabs-navigation-wrapper .nav-link[data-section=" + e + "]").parent()) : this.initNavItemClick(c(".qodef-tabs-navigation-wrapper ul li:first-child"));
                },
                saveOptionsInit: function (i) {
                    this.optionsForm = this.adminPage.find("#qode_framework_ajax_form");
                    var n,
                        o = c(".qodef-save-reset-loading"),
                        a = c(".qodef-save-success");
                    this.optionsForm.length &&
                        (c(".qodef-save-reset-button").on("click", function () {
                            n = c(this).attr("name");
                        }),
                        this.optionsForm.on("submit", function (e) {
                            e.preventDefault(), e.stopPropagation(), o.addClass("qodef-show-loader"), i.addClass("qodef-save-reset-disable");
                            var t = c(this),
                                e = { action: ("qodef_save" === n ? "qode_framework_action_save_options_" : "qode_framework_action_reset_options_") + t.data("options-name"), options_name: t.data("options-name") };
                            c.ajax({
                                type: "POST",
                                url: ajaxurl,
                                cache: !1,
                                data: c.param(e, !0) + "&" + t.serialize(),
                                success: function () {
                                    switch ((o.removeClass("qodef-show-loader"), n)) {
                                        case "qodef_reset":
                                            window.location.reload(!0);
                                            break;
                                        case "qodef_save":
                                            i.removeClass("qodef-save-reset-disable"),
                                                a.fadeIn(300),
                                                setTimeout(function () {
                                                    a.fadeOut(200);
                                                }, 2e3);
                                    }
                                },
                            });
                        }));
                },
                setCookie: function (e, t) {
                    document.cookie = e + "=" + t;
                },
                getCookie: function (e) {
                    for (var t = e + "=", i = decodeURIComponent(document.cookie).split(";"), n = 0; n < i.length; n++) {
                        for (var o = i[n]; " " === o.charAt(0); ) o = o.substring(1);
                        if (0 === o.indexOf(t)) return o.substring(t.length, o.length);
                    }
                    return "";
                },
                adminHeaderPosition: function () {
                    void 0 !== this.adminPage &&
                        this.adminPage.length &&
                        ((this.adminBarHeight = c("#wpadminbar").height()),
                        (this.adminHeader = c(".qodef-admin-header")),
                        (this.adminHeaderHeight = this.adminHeader.outerHeight(!0)),
                        (this.adminHeaderTopPosition = this.adminHeader.offset().top - parseInt(this.adminBarHeight)),
                        (this.adminContent = c(".qodef-admin-content")),
                        this.adminHeader.width(this.adminPage.width()),
                        c(window).on("scroll load", function () {
                            qodef.scroll >= t.adminHeaderTopPosition
                                ? (t.adminHeader.addClass("qodef-fixed").css("top", parseInt(t.adminBarHeight)), t.adminContent.css("marginTop", t.adminHeaderHeight))
                                : (t.adminHeader.removeClass("qodef-fixed").css("top", 0), t.adminContent.css("marginTop", 0));
                        }));
                },
                adminHeaderPositionLogic: function () {
                    768 < qodef.windowWidth &&
                        (qodef.scroll > t.adminHeaderTopPosition
                            ? (t.adminHeader.addClass("qodef-fixed"), t.adminContent.css("padding-top", t.adminHeaderHeight))
                            : (t.adminHeader.removeClass("qodef-fixed"), t.adminContent.css("padding-top", 0)));
                },
            },
            n = {
                init: function () {
                    (this.$holder = c(".qodef-image-uploader")),
                        this.$holder.length &&
                            this.$holder.each(function () {
                                n.initField(c(this));
                            });
                },
                reinit: function (e) {
                    e = c(e).find(".qodef-image-uploader");
                    e.length &&
                        e.each(function () {
                            n.initField(c(this));
                        });
                },
                initField: function (e) {
                    var i = {
                        $multiple: "yes" === e.data("multiple") && "no" === e.data("file"),
                        $file: "yes" === e.data("file"),
                        $allowed_type: "yes" === e.data("file") ? e.data("allowed-type") : "image",
                        $imageHolder: e,
                        mediaFrame: "",
                        attachment: "",
                        $thumbImageHolder: e.find(".qodef-image-thumb"),
                        $uploadId: e.find(".qodef-image-upload-id"),
                        $removeButton: e.find(".qodef-image-remove-btn"),
                    };
                    i.$thumbImageHolder.find("img").length && (i.$removeButton.show(), n.remove(i.$removeButton)),
                        i.$imageHolder.on("click", ".qodef-image-upload-btn", function () {
                            console.log("image")
                            i.mediaFrame ||
                                ((i.mediaFrame = wp.media.frames.fileFrame = wp.media({ title: c(this).data("frame-title"), button: { text: c(this).data("frame-button-text") }, library: { type: i.$allowed_type }, multiple: i.$multiple })),
                                i.$file ? n.fileSelect(i) : i.$multiple ? n.multipleSelect(i) : n.singleSelect(i),
                                i.mediaFrame.on("open", function () {
                                    var t = i.mediaFrame.state().get("selection");
                                    i.$uploadId
                                        .val()
                                        .split(",")
                                        .forEach(function (e) {
                                            (i.attachment = wp.media.attachment(e)), i.attachment.fetch(), t.add(i.attachment ? [i.attachment] : []);
                                        });
                                })),
                                i.mediaFrame.open();
                        });
                        i.$imageHolder.on("click", ".qodef-video-upload-btn", function () {
                            i.mediaFrame ||
                                ((i.mediaFrame = wp.media.frames.fileFrame = wp.media({ title: c(this).data("frame-title"), button: { text: c(this).data("frame-button-text") }, library: { type: "video" }, multiple: i.$multiple })),
                                n.videoSelect(i),
                                i.mediaFrame.on("open", function () {
                                    var t = i.mediaFrame.state().get("selection");
                                    i.$uploadId
                                        .val()
                                        .split(",")
                                        .forEach(function (e) {
                                            (i.attachment = wp.media.attachment(e)), i.attachment.fetch(), t.add(i.attachment ? [i.attachment] : []);
                                        });
                                })),
                                i.mediaFrame.open();
                        });
                },
                multipleSelect: function (i) {
                    i.mediaFrame.on("select", function () {
                        (i.attachment = i.mediaFrame
                            .state()
                            .get("selection")
                            .map(function (e) {
                                return e.toJSON(), e;
                            })),
                            i.$removeButton.show().trigger("change"),
                            n.remove(i.$removeButton);
                        var e = c.map(i.attachment, function (e) {
                            if ("image" === e.attributes.type) return e.id;
                        });
                        i.$uploadId.val(e), i.$thumbImageHolder.find("ul").empty().trigger("change");
                        for (var t = 0; t < i.attachment.length; ++t)
                            void 0 !== i.attachment[t].attributes.sizes.thumbnail
                                ? i.$thumbImageHolder.find("ul").append('<li><img src="' + i.attachment[t].attributes.sizes.thumbnail.url + '" alt="thumbnail" /></li>')
                                : i.$thumbImageHolder.find("ul").append('<li><img src="' + i.attachment[t].attributes.sizes.full.url + '" alt="thumbnail" /></li>');
                        i.$thumbImageHolder.show().trigger("change");
                    });
                },
                singleSelect: function (e) {
                    e.mediaFrame.on("select", function () {
                        (e.attachment = e.mediaFrame.state().get("selection").first().toJSON()),
                            e.attachment.hasOwnProperty("url") &&
                                "image" === e.attachment.type &&
                                (e.$removeButton.show(),
                                n.remove(e.$removeButton),
                                e.$uploadId.val(e.attachment.id),
                                e.$thumbImageHolder.empty(),
                                e.attachment.hasOwnProperty("sizes") && e.attachment.sizes.thumbnail
                                    ? e.$thumbImageHolder.append('<img class="qodef-single-image" src="' + e.attachment.sizes.thumbnail.url + '" alt="thumbnail" />')
                                    : e.$thumbImageHolder.append('<img class="qodef-single-image" src="' + e.attachment.url + '" alt="thumbnail" />'),
                                e.$thumbImageHolder.show().trigger("change"));
                    });
                },
                fileSelect: function (e) {
                    e.mediaFrame.on("select", function () {
                        (e.attachment = e.mediaFrame.state().get("selection").first().toJSON()),
                            e.attachment.hasOwnProperty("url") &&
                                e.$allowed_type.includes(e.attachment.type) &&
                                (e.$removeButton.show(),
                                n.remove(e.$removeButton),
                                e.$uploadId.val(e.attachment.id),
                                e.$thumbImageHolder.empty(),
                                e.$thumbImageHolder.append('<img class="qodef-file-image" src="' + e.attachment.icon + '" alt="thumbnail" /><div class="qodef-file-name">' + e.attachment.filename + "</div>"),
                                e.$thumbImageHolder.show().trigger("change"));
                    });
                },
                videoSelect: function (e) {
                    e.mediaFrame.on("select", function () {
                        (e.attachment = e.mediaFrame.state().get("selection").first().toJSON()),
                            e.attachment.hasOwnProperty("url") &&
                                "video" === e.attachment.type &&
                                (e.$removeButton.show(),
                                n.remove(e.$removeButton),
                                e.$uploadId.val(e.attachment.id),
                                e.$thumbImageHolder.empty(),
                                e.attachment.hasOwnProperty("sizes") && e.attachment.sizes.thumbnail
                                    ? e.$thumbImageHolder.append('<video class="qodef-single-image" src="' + e.attachment.sizes.thumbnail.url + '" controls  />')
                                    : e.$thumbImageHolder.append('<video class="qodef-single-image" src="' + e.attachment.url + '" controls />'),
                                e.$thumbImageHolder.show().trigger("change"));
                    });
                },
                remove: function (e) {
                    e.on("click", function () {
                        e.siblings(".qodef-image-thumb").hide(),
                            e.siblings(".qodef-image-thumb").find("img").attr("src", ""),
                            e.siblings(".qodef-image-thumb").find("li").remove(),
                            e
                                .siblings(".qodef-image-meta-fields")
                                .find('input[type="hidden"]')
                                .each(function () {
                                    c(this).val("");
                                }),
                            e.hide().trigger("change");
                    });
                },
            },
            i = {
                init: function () {
                    (this.$holder = c('.qodef-color-field:not(".widefat")')),
                        this.$holder.length &&
                            this.$holder.each(function () {
                                i.initField(c(this));
                            });
                },
                reinit: function (e) {
                    e = c(e).find('.qodef-color-field:not(".widefat")');
                    e.length && i.initField(e);
                },
                initField: function (e) {
                    e.wpColorPicker();
                },
            },
            o = {
                init: function () {
                    (this.$holder = c(".qodef-datepicker")),
                        this.$holder.length &&
                            this.$holder.each(function () {
                                o.initField(c(this));
                            });
                },
                reinit: function (e) {
                    e = c(e).find(".qodef-datepicker");
                    e.length && o.initField(e);
                },
                initField: function (t) {
                    var e = t.data("date-format");
                    t.datepicker({ dateFormat: e, changeYear: !0 }),
                        c(window).on("keyup", function (e) {
                            !t.is(":focus") || "" === t.val() || (8 !== e.keyCode && 46 !== e.keyCode) || t.datepicker("setDate", null);
                        });
                },
            },
            a = {
                init: function () {
                    var e = c("select.qodef-select2");
                    e.length && a.initField(e);
                },
                reinit: function (e) {
                    e = c(e).find("select.qodef-select2");
                    e.length && a.initField(e);
                },
                initField: function (e) {
                    "function" == typeof e.select2 && e.select2({ width: "100%", allowClear: !1, minimumResultsForSearch: 11 });
                },
            },
            d = {
                init: function () {
                    (this.$holder = c(".qodef-iconpicker-select:not(.qodef-select2):not(.qodef--icons-init)")),
                        this.$holder.length &&
                            this.$holder.each(function () {
                                var e = c(this);
                                "function" == typeof e.fontIconPicker && (e.addClass("qodef--icons-init"), e.fontIconPicker());
                            });
                },
                reinit: function (e, t) {
                    e = void 0 !== t && "" !== t && !1 !== t ? t : c(e).find(".qodef-iconpicker-select:not(.qodef-select2)");
                    e.length && !e.hasClass("qodef--icons-init") && "function" == typeof e.fontIconPicker && (e.addClass("qodef--icons-init"), e.fontIconPicker());
                },
            },
            r = {
                init: function (e) {
                    e ? (r.initObserver(), r.gutenbergEditor()) : r.classicEditor();
                },
                initObserver: function () {
                    var n,
                        e = c(".edit-post-sidebar");
                    e.length &&
                        ((n = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver),
                        (c.fn.attrChange = function (t) {
                            if (n) {
                                var e = { attributes: !0, attributeFilter: ["class"], subtree: !1 },
                                    i = new n(function (e) {
                                        e.forEach(function (e) {
                                            t.call(e.target);
                                        });
                                    });
                                return this.each(function () {
                                    i.observe(this, e);
                                });
                            }
                        }),
                        e.find(".edit-post-sidebar__panel-tabs ul li:first-child button").attrChange(function () {
                            c(this).hasClass("is-active") && r.gutenbergEditor();
                        }));
                },
                classicEditor: function () {
                    var e = c("#post-formats-select"),
                        t = e.find('input[name="post_format"]'),
                        e = e.find('input[name="post_format"]:checked').attr("id");
                    t.each(function () {
                        r.metaBoxVisibility(!1, c(this).attr("id"));
                    }),
                        r.metaBoxVisibility(!0, e),
                        t.change(function () {
                            r.classicEditor();
                        });
                },
                gutenbergEditor: function () {
                    var e,
                        t = c(".edit-post-sidebar");
                    t.length &&
                        ((t = (e = t.find(".editor-post-format")).find("select option:selected")),
                        e.find("select option").each(function () {
                            r.metaBoxVisibility(!1, "post_format_" + c(this).val());
                        }),
                        t.length && r.metaBoxVisibility(!0, "post_format_" + t.val()),
                        e.find("select").one("change", function () {
                            r.gutenbergEditor();
                        }));
                },
                metaBoxVisibility: function (e, t) {
                    "" !== t && void 0 !== t && ((t = t.replace(/-/g, "_")), e ? c(".qodef-section-name-qodef_" + t + "_section").fadeIn() : c(".qodef-section-name-qodef_" + t + "_section").hide());
                },
            },
            s = {
                init: function (e) {
                    (this.$addressHolder = c(".qodef-address-field-holder")),
                        this.$addressHolder.length &&
                            this.$addressHolder.each(function () {
                                s.initMap(c(this), e);
                            });
                },
                initMap: function (e, t) {
                    var i = e.find(".qodef-reset-marker"),
                        n = e.find("input"),
                        o = e.find(".qodef-map-canvas"),
                        a = e.data("country"),
                        d = e.data("lat"),
                        r = c('.qodef-address-elements [name="' + d + '"]'),
                        e = e.data("lng"),
                        s = c('.qodef-address-elements [name="' + e + '"]');
                    t && n.trigger("geocode"),
                        "function" == typeof n.geocomplete &&
                            void 0 === t &&
                            (n.geocomplete({ map: o, details: ".qodef-address-elements", detailsAttribute: "data-geo", types: ["geocode", "establishment"], country: a, markerOptions: { draggable: !0 } }).bind("geocode:result", function () {
                                i.show();
                            }),
                            n.on("geocode:dragged", function (e, t) {
                                r.val(t.lat()),
                                    s.val(t.lng()),
                                    i.show(),
                                    n.geocomplete("map").panTo(t),
                                    new google.maps.Geocoder().geocode({ latLng: t }, function (e, t) {
                                        t === google.maps.GeocoderStatus.OK && "object" == typeof e[0] && n.val(e[0].formatted_address);
                                    });
                            }),
                            n.on("focus", function () {
                                var e = n.geocomplete("map");
                                google.maps.event.trigger(e, "resize");
                            }),
                            i.on("click", function (e) {
                                e.preventDefault(), i.hide(), n.geocomplete("resetMarker").val(""), r.val(""), s.val("");
                            }),
                            c(window).on("load", function () {
                                n.trigger("geocode");
                            }));
                },
            };
        qodef.qodefAddressFields = s;
        var f = {
            init: function () {
                var i, n, e;
                (this.searchField = c(".qodef-search-field")),
                    (this.adminContent = c(".qodef-admin-content")),
                    (this.tabHolder = c(".tab-content")),
                    (this.rowHolder = c(".qodef-row-wrapper")),
                    (this.sectionHolder = c(".qodef-section-wrapper")),
                    (this.repeaterHolder = c(".qodef-repeater-wrapper")),
                    (this.fieldHolder = c(".qodef-field-holder")),
                    this.searchField.length &&
                        ((i = this.searchField.next(".qodef-search-loading")),
                        this.searchField.on("keyup paste", function () {
                            var t = c(this);
                            t.attr("autocomplete", "off"),
                                i.removeClass("qodef-hidden"),
                                clearTimeout(e),
                                (e = setTimeout(function () {
                                    var e = t.val();
                                    (n = new RegExp(t.val(), "gi")),
                                        i.addClass("qodef-hidden"),
                                        e.length < 3
                                            ? f.resetSearchView()
                                            : (f.resetSearchView(),
                                              f.adminContent.addClass("qodef-apply-search"),
                                              f.fieldHolder.each(function () {
                                                  var e = c(this);
                                                  -1 !== e.find(".qodef-field-desc").text().search(n)
                                                      ? (e.parents(".tab-content").addClass("qodef-search-show"),
                                                        e.parents(".qodef-section-wrapper").addClass("qodef-search-show"),
                                                        e.parents(".qodef-row-wrapper").addClass("qodef-search-show"),
                                                        e.parents(".qodef-repeater-wrapper").addClass("qodef-search-show"))
                                                      : e.addClass("qodef-search-hide");
                                              }));
                                }, 500));
                        }));
            },
            resetSearchView: function () {
                this.adminContent.removeClass("qodef-apply-search"),
                    this.tabHolder.removeClass("qodef-search-show"),
                    this.rowHolder.removeClass("qodef-search-show"),
                    this.sectionHolder.removeClass("qodef-search-show"),
                    this.repeaterHolder.removeClass("qodef-search-show"),
                    this.fieldHolder.removeClass("qodef-search-hide");
            },
            resetSearchField: function () {
                this.searchField.val("");
            },
        };
    })(jQuery),
    (function (i) {
        "use strict";
        i(document).ready(function () {
            n.initColorPicker(), n.initIconPicker();
        }),
            i(document).on("widget-added widget-updated", function (e, t) {
                n.initColorPicker(t), n.initDependency(t), n.initIconPicker(t);
            });
        var n = {
            initColorPicker: function (e) {
                e = void 0 !== e ? e.find(".qodef-widget-field--color") : i("#widgets-right .qodef-widget-field--color");
                e.length && n.initPickerField(e, e.find(".qodef-color-field"));
            },
            initPickerField: function (e, t) {
                t.length &&
                    e.find(".wp-picker-container").length <= 0 &&
                    t.wpColorPicker({
                        change: _.throttle(function () {
                            i(this).trigger("change");
                        }, 3e3),
                    });
            },
            initDependency: function (e) {
                e = e.find(".widget-content .qodef-widget-field[data-option-name]");
                e.length && qodef.qodefDependency.reinitWidget(e);
            },
            initIconPicker: function (e) {
                e = void 0 !== e ? e.find(".qodef-widget-iconpicker-select:not(.qodef-select2):not(.qodef--icons-init)") : i("#widgets-right .qodef-widget-iconpicker-select:not(.qodef-select2):not(.qodef--icons-init)");
                e.length && "function" == typeof e.fontIconPicker && (e.addClass("qodef--icons-init"), e.fontIconPicker());
            },
        };
    })(jQuery);
